import streamlit as st
from streamlit_autorefresh import st_autorefresh
from modules.estrategias import JOGADAS
from modules.logica import atualizar_numeros, calcular_metricas, gerar_sinal
from modules.estilos import renderizar_numero
from modules.analise import analisar_regioes_quentes
import os

# --- 1. CONFIGURA√á√ÉO INICIAL DA P√ÅGINA ---
# Configura o layout da p√°gina para ocupar a largura total
st.set_page_config(layout="wide")

# Ativa a atualiza√ß√£o autom√°tica do Streamlit a cada 5 segundos
st_autorefresh(interval=5000, key="auto_refresh")

# --- 2. INICIALIZA√á√ÉO DO ESTADO DE SESS√ÉO ---
DEFAULTS = {
    'numeros_sorteados': [],
    'ultimas_linhas_processadas': [],
    'acertos': 0,
    'erros': 0,
    'ultimo_sinal_numero': None,
    'current_signal_alert': "",
    'ativar_sinal': False,
    'jogada_selecionada': list(JOGADAS.keys())[0],
    'jogada_sinal': list(JOGADAS.keys())[0],
    'sequencias_consecutivas': 3,
    'sinal_sequencias_consecutivas': 3,
    'inverter_logica_sequencia': False,
    'inverter_logica': False,
    'sinal_inverter_logica_sequencia': False,
    'sinal_inverter_logica': False
}
for key, value in DEFAULTS.items():
    if key not in st.session_state:
        st.session_state[key] = value

# --- 3. CARREGAMENTO DO ESTILO CSS ---
with open(os.path.join("modules", "style.css")) as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)


def main():
    st.title('An√°lise de Padr√µes na Roleta Europeia')
    
    # --- 4.1. BARRA LATERAL (SIDEBAR) ---
    with st.sidebar:
        st.header("Configura√ß√µes da An√°lise")
        st.selectbox('Selecione a Estrat√©gia:', list(JOGADAS.keys()), key="jogada_selecionada")
        st.slider('Sequ√™ncias consecutivas para an√°lise', min_value=2, max_value=5, key="sequencias_consecutivas")
        st.checkbox('Analisar sequ√™ncias de "erros"', help="Verifica sequ√™ncias consecutivas de n√∫meros que *n√£o* fazem parte da estrat√©gia escolhida.", key="inverter_logica_sequencia")
        st.checkbox('Analisar quebra de sequ√™ncia', help="Ex: Se a estrat√©gia for 3 acertos, a quebra acontece em 2 acertos + 1 erro.", key="inverter_logica")
        st.button('Limpar N√∫meros Sorteados', on_click=lambda: st.session_state.numeros_sorteados.clear())

        st.markdown("---")
        st.header("Avisador de Sinais")
        st.selectbox('Jogada do Sinal:', list(JOGADAS.keys()), key="jogada_sinal")
        st.slider('Sequ√™ncias do Sinal', min_value=2, max_value=5, key="sinal_sequencias_consecutivas")
        st.checkbox('Ativar Avisador de Sinais', help="Ativa os alertas de aposta.", key="ativar_sinal")
        st.checkbox('Sinal: Sequ√™ncia de "erros"', help="Alerta para sequ√™ncias consecutivas de erros.", key="sinal_inverter_logica_sequencia")
        st.checkbox('Sinal: Quebra de sequ√™ncia', help="Alerta para a quebra de uma sequ√™ncia de acertos.", key="sinal_inverter_logica")
    
    # --- 4.2. CORPO PRINCIPAL DA INTERFACE ---
    st.header("An√°lise em Tempo Real")
    st.markdown("""
    **Legenda de An√°lise:**
    - üü¶ **Azul**: Padr√£o de Aposta Identificado
    - üüß **Laranja**: Quebra de Padr√£o Identificada
    - üü© **Verde**: N√∫mero que faz parte da estrat√©gia escolhida.
    - üü• **Vermelho**: N√∫mero que *n√£o* faz parte da estrat√©gia escolhida.
    """, unsafe_allow_html=True) 

    gerar_sinal()
    
    # Slider para selecionar a quantidade de n√∫meros a serem analisados
    if st.session_state.numeros_sorteados:
        quantidade_analise = st.slider(
            'Selecione a quantidade de n√∫meros para a an√°lise:',
            min_value=10,
            max_value=len(st.session_state.numeros_sorteados),
            value=min(30, len(st.session_state.numeros_sorteados)),
            key="quantidade_analise_slider"
        )
    else:
        quantidade_analise = 0

    # Atualiza as m√©tricas de acertos e erros a partir do m√≥dulo 'logica'
    st.session_state.acertos, st.session_state.erros = calcular_metricas(
        quantidade_analise,
        st.session_state.jogada_selecionada,
        st.session_state.sequencias_consecutivas,
        st.session_state.inverter_logica,
        st.session_state.inverter_logica_sequencia,
        st.session_state.numeros_sorteados
    )
    
    # Exibe as m√©tricas de desempenho em caixas
    st.subheader("M√©tricas de Desempenho")
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(f'<div class="metric-box metric-box-acerto"><h6>Acertos</h6><h3>{st.session_state.acertos}</h3></div>', unsafe_allow_html=True)
    with col2:
        st.markdown(f'<div class="metric-box metric-box-erro"><h6>Erros</h6><h3>{st.session_state.erros}</h3></div>', unsafe_allow_html=True)
    
    st.markdown("---")

    # Exibe a an√°lise de regi√µes quentes
    st.subheader("An√°lise de Regi√µes Quentes")
    if st.session_state.numeros_sorteados:
        contagens, regiao_quente = analisar_regioes_quentes(st.session_state.numeros_sorteados, quantidade_analise)

        cols = st.columns(len(contagens))
        for i, (nome, contagem) in enumerate(contagens.items()):
            with cols[i]:
                classe_cor = nome.replace(" ", "")
                st.markdown(f'<div class="hot-region-box hot-region-{classe_cor}"><h6>{nome}</h6><h3>{contagem}</h3></div>', unsafe_allow_html=True)
        
        st.markdown(f"""
        <div class="hot-region-winner">
            <h4>A regi√£o mais quente √© a dos **{regiao_quente}**</h4>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.info("Aguardando n√∫meros para an√°lise de regi√µes...")
    
    st.markdown("---")

    # Exibe a caixa de alerta de sinal se o padr√£o for detectado
    if st.session_state.current_signal_alert:
        st.markdown(st.session_state.current_signal_alert, unsafe_allow_html=True)

    # Cont√™iner para exibir a lista de n√∫meros sorteados
    with st.container():
        if st.session_state.numeros_sorteados:
            num_colunas_exibicao = 8
            numeros_invertidos = st.session_state.numeros_sorteados[::-1]
            
            for i in range(0, len(numeros_invertidos), num_colunas_exibicao):
                row_numeros = numeros_invertidos[i:i + num_colunas_exibicao]
                cols = st.columns(len(row_numeros))
                for j, numero in enumerate(row_numeros):
                    renderizar_numero(cols[j], numero, i + j)
        else:
            st.info("Aguardando n√∫meros sorteados...")
    
    atualizar_numeros()
    
if __name__ == "__main__":
    main()